class Solution {
public:
    void helper(vector<vector<int>> &mat, int r, int c, string path, vector<string> &ans){
        int n = mat.size();
        if(r < 0 || c < 0 || r >= n || c >= n || mat[r][c] == 0 || mat[r][c] == -1){
            return;
        }
        if(r == n-1 && c == n-1){ // reached destination
            ans.push_back(path);
            return;
        }

        mat[r][c] = -1; // mark visited

        // Explore directions in lexicographical order: D, L, R, U
        helper(mat, r+1, c, path+"D", ans); // Down
        helper(mat, r, c-1, path+"L", ans); // Left
        helper(mat, r, c+1, path+"R", ans); // Right
        helper(mat, r-1, c, path+"U", ans); // Up

        mat[r][c] = 1; // unmark (backtrack)
    }

    vector<string> ratInMaze(vector<vector<int>>& mat) {
        vector<string> ans;
        string path = "";
        helper(mat, 0, 0, path, ans);
        return ans;
    }
};
